 pipeline {
     agent any
     environment {
         DOCKER_IMAGE_NAME_PC = "dd/pc"
         CANARY_REPLICAS = 0
         KUBE_CONTROLLER_IP = "35.178.180.240"
     }
     stages {
         stage('PC Build') {
             steps {
                 echo 'Running PC build automation'
             }
         }
         stage('Build Docker Image') {
             when {
                 branch 'master'
             }
             steps {
                 script {
                     app = docker.build(DOCKER_IMAGE_NAME_HTTPD)
                 }
             }
         }
         stage('Push Docker Image') {
             when {
                 branch 'master'
             }
             steps {
                 script {
                     docker.withRegistry('https://dd-dockerreg.academy.grads.al-labs.co.uk:5000') {
                         app.push("${env.BUILD_NUMBER}")
                         app.push("latest")
                     }
                 }
             }
         }
         stage('CanaryDeploy') {
             when {
                 branch 'master'
             }
             environment {
                 CANARY_REPLICAS = 1
             }
             steps {
                 kubernetesDeploy(
                     kubeconfigId: 'kubeconfig',
                     configs: 'httpd/Deploy-canary.yml',
                     enableConfigSubstitution: true
                 )
             }
         }
         stage('SmokeTest') {
             when {
                 branch 'master'
             }
             steps {
                 script {
                     sleep (time: 5)
                     def response = httpRequest (
                         url: "http://$KUBE_MASTER_IP:8081/",
                         timeout: 30
                     )
                     if (response.status != 200) {
                         error("Smoke test against canary deployment failed.")
                     }
                 }
             }
         }
         stage('DeployToProduction') {
             when {
                 branch 'master'
             }
             steps {
                 milestone(1)
                 kubernetesDeploy(
                     kubeconfigId: 'kubeconfig',
                     configs: 'httpd/Deploy.yml',
                     enableConfigSubstitution: true
                 )
             }
         }
     }
     post {
         cleanup {
             kubernetesDeploy (
                 kubeconfigId: 'kubeconfig',
                 configs: 'httpd/Deploy-canary.yml',
                 enableConfigSubstitution: true
             )
         }
     }
 }
